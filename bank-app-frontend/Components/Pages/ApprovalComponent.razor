@page "/approval"
@using Models
@using Services
@inject HttpClientService _httpClientService
@rendermode InteractiveServer
<h3 class="text-center">Account Opening Requests</h3>
@if (applicantsList == null)
{
    <h4>Loading...</h4>
}
else
{
    
<div class="p-4 m-4">
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th class="col-1">Id</th>
                <th class="col-2">Name</th>
                <th class="col-2">CNIC</th>
                <th class="col-2">Account Type</th>
                <th class="col-2">Operation</th>
            </tr>
        </thead>
           
            <tbody>
            @foreach (var applicant in applicantsList)
            {
                <tr>
                    <td>@applicant.Id</td>
                    <td>@applicant.ApplicateName</td>
                    <td>@applicant.CNIC</td>
                    <td>@applicant.AccountType</td>
                    <td class="text-center">
                    <button type="button" @onclick="()=>UpdateApplicantStatus(applicant.Id,AccountStatus.APPROVED,1)" class="btn btn-success">Approve</button>
                    <button type="button" @onclick="()=>UpdateApplicantStatus(applicant.Id,AccountStatus.DENIED,1)" class="btn btn-danger">Reject</button>
                    </td>
                </tr>
            }
        </tbody>
        
    </table>
</div>
}


@code {
    IEnumerable<Applicant> applicantsList = null;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        applicantsList = await _httpClientService.GetApplicants();
        //todo : both rejected and approved applicants should not show.
        applicantsList = applicantsList.Where(app => app.AccountStatus != AccountStatus.APPROVED).Select(app => app);
        Console.WriteLine(applicantsList);
    }

    public void testfunction(string parameter)
    {

        Console.WriteLine("jkdjfdsjkfjkdkjfjksdf");
        string url = parameter + "ABC";

    }
    public async Task UpdateApplicantStatus(long applicantId,AccountStatus accountStatus,long? tellerId)
    {
        await this._httpClientService.UpdateApplicantStatus(applicantId, accountStatus, tellerId);
    }

}
